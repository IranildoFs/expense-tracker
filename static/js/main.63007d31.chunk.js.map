{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilters.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","date","Date","category","value","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","FilterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63007d31.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    \n`;\n\nexport const Header = styled.div`\n    background-color: darkblue;\n    height: 150px;\n    text-align: center;\n`;\n\nexport const HeaderText = styled.h1`\n    margin:0;\n    padding: 0;\n    color: #fff;\n    padding-top: 30px;\n`;\nexport const Body = styled.div`\n    margin:auto;\n    max-width: 980px;\n    margin-bottom: 50px;\n`;","import { Category} from '../types/Category'\n\nexport const categories: Category= {\n    food: { title: 'Alimentação', color: 'blue', expense: true},\n    rent: { title: 'Aluguel', color: 'brown', expense: true},\n    salary: { title: 'Salário', color: 'green', expense: false},\n}","import {Item} from '../types/Item';\n\nexport const items:Item[] = [\n    {date: new Date(2021, 10, ), category: 'food', title: 'McDonalds', value: 21.12},\n    {date: new Date(2021, 9, 6), category: 'food', title: 'Burger King', value: 21.12},\n    {date: new Date(2021, 9, 17), category: 'salary', title: 'Google', value: 5000.12},\n    {date: new Date(2021, 9, 18), category: 'rent', title: 'Aluguel', value: 500.12},\n    \n];","import {Item} from '../types/Item'\nexport const getCurrentMonth = () =>{\n    let now = new Date();\n    return `${now.getFullYear()}-${now.getMonth()+1}`;\n}\n\nexport const FilterListByMonth = (list:Item[], date: String):Item[] =>{\n    let newList: Item[] = [];\n    let[year, month] = date.split('-');\n\n    for(let i in list){\n        if(list[i].date.getFullYear() ===parseInt(year) && \n        (list[i].date.getMonth()+1) ===parseInt(month)){\n            newList.push(list[i]);\n        }\n    }\n\n    return newList;\n}\n\nexport const formatDate = (date:Date):string =>{\n    let year = date.getFullYear();\n    let month = date.getMonth()+1;\n    let day = date.getDate();\n\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n}\n\nconst addZeroToDate = (n:number): string =>{\n    if(n<10){\n        return `0${n}`;\n    }else{\n        return `${n}`;\n    }\n}\nexport const formatCurrentMonth = (currentMonth:string):string =>{\n    let [year, month] = currentMonth.split('-');\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    return `${months[parseInt(month)-1]} de ${year}`;\n}","import styled from 'styled-components';\n\nexport const Table = styled.table`\n    width: 100%;\n    background-color: #fff;\n    padding: 20px;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    margin-top: 20px;\n`;\n\nexport const TableHeadColumn = styled.th< {width?: number} >`\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\n    padding:10px 0;\n    text-align: left;\n`;","import styled from 'styled-components';\n\nexport const TableLine = styled.tr`\n\n`;\n\nexport const TableColumn = styled.td`\n    padding: 10px 0;\n    \n`;\n\nexport const Category = styled.div<{color:string}>`\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius:5px;\n    color: #fff;\n    background-color: ${props=>props.color};\n`;\nexport const Value = styled.div<{color:string}>`\n    color: ${props=>props.color};\n`;","import * as C from './styles';\nimport { Item} from '../../types/Item';\nimport {formatDate} from '../../helpers/dateFilters';\nimport { categories} from '../../data/categories'\n\ntype Props ={\n    item: Item\n}\n\n export const TableItem = ({item}: Props) => {\n    return (\n        <C.TableLine>\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\n            <C.TableColumn>\n                <C.Category color={categories[item.category].color}>\n                    {categories[item.category].title}\n                </C.Category>\n            </C.TableColumn>\n            <C.TableColumn>R$ {item.title}</C.TableColumn>\n            <C.TableColumn>\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\n                R$ {item.value}\n                </C.Value>   \n            </C.TableColumn>\n            \n        </C.TableLine>\n    );\n}","import * as C from './styles';\nimport { Item } from '../../types/Item';\nimport { TableItem} from '../TableItem';\n\ntype Props = {\n    list: Item[]\n}\n\nexport const TableArea = ({list}:Props) =>{\n    return(\n        <C.Table> \n            <thead>\n                <tr>\n                   <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\n                   <C.TableHeadColumn width={100}>Categoria</C.TableHeadColumn>\n                   <C.TableHeadColumn >Título</C.TableHeadColumn>\n                   <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\n                </tr>\n            </thead>\n            <tbody>\n                {list.map((item,index)=>(\n                    <TableItem key={index} item={item} />\n                ))\n\n                }\n            </tbody>\n        </C.Table>\n    );\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #fff;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: -40px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const MonthArea = styled.div`\n    flex:1;\n    display: flex;\n    align-items: center;\n`;\n\nexport const MonthArrow = styled.div`\n    width: 40px;\n    text-align: center;\n    font-size: 25px;\n    cursor: pointer;\n`;\nexport const MonthTitle = styled.div`\n    flex:1;\n    text-align: center;\n`;\nexport const ResumeArea = styled.div`\n    flex:2;\n    display:flex;\n`;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    flex:1;\n\n`;\nexport const Title = styled.div`\n    text-align:center;\n    font-weight: bold;\n    color: #888;\n    margin-bottom: 5px;\n    \n`;\nexport const Info = styled.div<{color?: string}>`\n    text-align:center;\n    font-weight: bold;\n    color: #000;\n    color: ${props => props.color ?? '#000'};\n`;\n","import * as C from './styles';\ntype Props = {\n    title: string;\n    value: number;\n    color?:string,\n}\n\nexport const ResumeItem = ({title, value,color}:Props) =>{\n    return(\n        <C.Container>\n            <C.Title>{title}</C.Title>\n            <C.Info color = {color}>R$ {value}</C.Info>\n        </C.Container>\n    );\n}","import * as C from './styles';\nimport { formatCurrentMonth} from '../../helpers/dateFilters';\nimport { ResumeItem} from '../ResumeItem';\n\ntype Props = {\n    currentMonth: string;\n    onMonthChange: (newMonth:string) => void;\n    income: number;\n    expense: number;\n}\nexport const InfoArea = ({currentMonth, onMonthChange, income, expense}: Props) => {\n    \n    const handlePrevMonth = () =>{\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month)-1,1);\n        currentDate.setMonth(currentDate.getMonth()-1);\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth()+1}`);\n    }\n    const handleNextMonth = () =>{\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month)-1,1);\n        currentDate.setMonth(currentDate.getMonth()+1);\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth()+1}`);\n    }\n    return(\n        <C.Container>\n            <C.MonthArea>\n                <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\n                <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n                <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\n            </C.MonthArea>\n            <C.ResumeArea>\n                <ResumeItem title='Receitas' value={income}/>\n                <ResumeItem title='Despesas' value={expense}/>\n                <ResumeItem title='Balanço'value={income-expense} color={(income-expense)<0 ? 'red': 'green'}/>\n            </C.ResumeArea>\n\n        </C.Container>\n    );\n}","\n   \nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n`;\nexport const InputLabel = styled.label`\n    flex: 1;\n    margin: 10px;\n`;\nexport const InputTitle = styled.div`\n    font-weight: bold;\n    margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Select = styled.select`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Button = styled.button`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    background-color: lightblue;\n    color: black;\n    cursor: pointer;\n    &:hover {\n        background-color: blue;\n        color: white;\n    }\n`;","import { useState } from 'react';\nimport * as C from './styles';\nimport { Item } from '../../types/Item';\n\nimport { categories } from '../../data/categories';\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState('');\n  const [categoryField, setCategoryField] = useState('');\n  const [titleField, setTitleField] = useState('');\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if(isNaN(new Date(dateField).getTime())) {\n      errors.push('Data inválida!');\n    }\n    if(!categoryKeys.includes(categoryField)) {\n      errors.push('Categoria inválida!');\n    }\n    if(titleField === '') {\n      errors.push('Título vazio!');\n    }\n    if(valueField <= 0) {\n      errors.push('Valor inválido!');\n    }\n\n    if(errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField\n      });\n      clearFields();\n    }\n  }\n\n  const clearFields = () => {\n    setDateField('');\n    setCategoryField('');\n    setTitleField('');\n    setValueField(0);\n  }\n\n  return (\n      <C.Container>\n        <C.InputLabel>\n          <C.InputTitle>Data</C.InputTitle>\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Categoria</C.InputTitle>\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\n            <>\n              <option></option>\n              {categoryKeys.map((key, index) => (\n                <option key={index} value={key}>{categories[key].title}</option>\n              ))}\n            </>\n          </C.Select>\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Título</C.InputTitle>\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Valor</C.InputTitle>\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>&nbsp;</C.InputTitle>\n          <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\n        </C.InputLabel>\n      </C.Container>\n  );\n}","import React from 'react';\n\nimport { useState, useEffect} from 'react';\n\nimport * as C from  './App.styles';\n\nimport { Item } from './types/Item';\nimport { categories } from './data/categories';\nimport { items } from './data/items';\nimport { getCurrentMonth, FilterListByMonth } from './helpers/dateFilters';\nimport {TableArea} from './components/TableArea';\nimport {InfoArea} from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\nimport {} from './data/categories';\n\nconst App = () =>{\n  const [list, setList] = useState<Item[]>(items);\n  const [filteredList, setFilteredList] = useState<Item[]>([]);\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n  \n  useEffect(()=>{\n    setFilteredList(FilterListByMonth(list, currentMonth));\n  },[list, currentMonth]);\n\n  useEffect(() => {\n    let incomeCount = 0;\n    let expenseCount = 0;\n    for(let i in filteredList){\n      if(categories[filteredList[i].category].expense){\n        expenseCount +=filteredList[i].value;\n      }\n      else{\n        incomeCount +=filteredList[i].value;\n      }\n    }\n    setIncome(incomeCount);\n    setExpense(expenseCount);\n  }, [filteredList]);\n\n  const handleMonthChange=(newMonth:string)=> {\n    setCurrentMonth(newMonth);\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  }\n  return(\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n      <InfoArea currentMonth={currentMonth} onMonthChange={handleMonthChange} income={income} expense={expense}></InfoArea>\n      <InputArea onAdd={handleAddItem} />\n      <TableArea list={filteredList}></TableArea>\n      </C.Body>\n    </C.Container>\n\n\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}